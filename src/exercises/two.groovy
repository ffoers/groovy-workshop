import groovy.transform.Immutable

//These exercises will teach you some of the possibilities of closures in groovy

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// defining and calling a closure
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def closure01 = { 1 }

//TODO: substitute the number 2 with a call to the closure
assert 2 == 1

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// using variables from the surrounding scope
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int closure02var = 9
def closure02 = {} // TODO: define correct closure so that return value is parameter plus closure02var

assert closure02(1) == 10
closure02var = 2
assert closure02(1) == 3

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// defining a closure from an object method
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Immutable
class SomeClass {
    int x

    int sum(int val) {
        x + val
    }
}

//TODO use sum as a closure so that the assertion works

SomeClass someValue = new SomeClass(x: 5)
def closure03 = null
assert closure03(3) == 8

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// return a closure from a method
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Closure incrementor(int increment) {
    return null //TODO: return a closure that makes the assertions work
}

assert incrementor(2)(3) == 5
assert incrementor(3)(3) == 6
assert incrementor(3)(10) == 13

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// passing a closure as a parameter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//TODO: define a closure which checks if its parameter is even
def closure04

assert [1, 3].every(closure04) == false

//TODO find the first even element
assert [3,7,6,9,12].find {}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// partial application
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def addition = {i,j -> i+j}

//TODO: use addition closure and partial application to define incrementors which make the assertions work
def inc1 = {}
assert inc1(3)==5

def inc2 = {}
assert inc2(3)==7


